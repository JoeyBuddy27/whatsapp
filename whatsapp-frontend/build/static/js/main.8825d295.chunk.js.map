{"version":3,"sources":["Components/SidebarChat.js","store/StateProvider.js","Components/Sidebar.js","axios.js","Components/Chat.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["SidebarChat","props","className","Avatar","src","avatar","name","lastMessage","online","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","state","useContext","Sidebar","messages","dispatch","filter","msg","currentUser","isSidebarHidden","IconButton","type","placeholder","users","map","user","filteredMessages","key","id","onClick","currentAvatar","changeRoom","length","message","instance","axios","create","baseURL","Chat","useState","input","setInput","sendAsGuest","setSendAsGuest","sendMessage","e","a","preventDefault","post","timestamp","Date","received","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","ArrowBackIos","SearchOutlined","AttachFile","Math","random","moment","fromNow","ref","InsertEmoticon","action","onChange","target","changeSender","Mic","App","setMessages","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8825d295.chunk.js","sourcesContent":["import { Avatar } from \"@material-ui/core/\";\r\nimport React from \"react\";\r\n\r\nfunction SidebarChat(props) {\r\n  return (\r\n    <div className=\"sidebarChat\">\r\n      <Avatar src={props.avatar} />\r\n      <div className=\"sidebarChat__info\">\r\n        <h2>{props.name}</h2>\r\n        <p>{props.lastMessage}</p>\r\n      </div>\r\n      {props.online && <Avatar className=\"sidebarChat__online\"> </Avatar>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { useContext, createContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = (state) => useContext(StateContext); //export the state to be used in other files\r\n","import React from \"react\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { Avatar, IconButton } from \"@material-ui/core/\";\r\nimport SearchOutlined from \"@material-ui/icons/Search\";\r\nimport { useStateValue } from \"../store/StateProvider\";\r\n\r\nfunction Sidebar({ messages }) {\r\n  const [initialState, dispatch] = useStateValue();\r\n\r\n  const changeRoom = (user) => {\r\n    dispatch({\r\n      type: \"CHANGE_ROOM\",\r\n      currentUser: user.name,\r\n      currentAvatar: user.avatar,\r\n      isSidebarHidden: true,\r\n    });\r\n  };\r\n\r\n  const filteredMessages = messages.filter(\r\n    (msg) =>\r\n      msg.currentUser === initialState.currentUser ||\r\n      (msg.name === \"You\" && msg.currentUser === initialState.currentUser)\r\n  );\r\n\r\n  return (\r\n    // <div className={`sidebar ${initialState.sidebarHide}`}>\r\n    <div\r\n      className={`sidebar ${\r\n        !initialState.isSidebarHidden ? \" \" : \"sidebar__hide\"\r\n      }`}\r\n    >\r\n      <div className=\"sidebar__header\">\r\n        <Avatar\r\n          className=\"sidebar__header__avatar\"\r\n          src=\"https://scontent-lht6-1.xx.fbcdn.net/v/t1.0-9/98441061_10157040823906712_4132654932786413568_o.jpg?_nc_cat=108&_nc_sid=09cbfe&_nc_ohc=9wchdriyh8gAX_U0SVM&_nc_ht=scontent-lht6-1.xx&oh=d75b86134dab70faf6580db0317763e1&oe=5F99E78D\"\r\n        />\r\n        <div className=\"sidebar__header__right\">\r\n          <IconButton>\r\n            <DonutLargeIcon className=\"donut\" />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__search__container\">\r\n          <SearchOutlined />\r\n          <input type=\"text\" placeholder=\"Search or start new chat!\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        {initialState.users.map((user) => {\r\n          const filteredMessages = messages.filter(\r\n            (msg) => msg.currentUser === user.name\r\n          );\r\n\r\n          return (\r\n            <div key={user.id} onClick={() => changeRoom(user)}>\r\n              <SidebarChat\r\n                messages={messages}\r\n                key={user.id}\r\n                name={user.name}\r\n                avatar={user.avatar}\r\n                lastMessage={\r\n                  filteredMessages[filteredMessages.length - 1]?.message\r\n                }\r\n                online={user.online}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://live-chat-app-joe.herokuapp.com\",\r\n});\r\n\r\nexport default instance;\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport {\r\n  AttachFile,\r\n  InsertEmoticon,\r\n  MoreVert,\r\n  SearchOutlined,\r\n  Mic,\r\n  ArrowBackIos,\r\n} from \"@material-ui/icons\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"../axios\";\r\nimport { useStateValue } from \"../store/StateProvider\";\r\nimport moment from \"moment\";\r\nimport FadeIn from \"react-fade-in\";\r\n\r\nfunction Chat({ messages }, props) {\r\n  const [input, setInput] = useState(\"\");\r\n  const [initialState, dispatch] = useStateValue();\r\n  const [sendAsGuest, setSendAsGuest] = useState(false);\r\n\r\n  // alert(initialState.currentUser);\r\n  //send typed message via Axios to API\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    await axios.post(\"/messages/new\", {\r\n      message: input,\r\n      name: sendAsGuest ? initialState.currentUser : \"You\",\r\n      timestamp: new Date(),\r\n      received: sendAsGuest ? true : false,\r\n      currentUser: initialState.currentUser,\r\n    });\r\n\r\n    //clear input\r\n    setInput(\"\");\r\n  };\r\n\r\n  const changeSender = (e) => {\r\n    e.preventDefault();\r\n    setSendAsGuest(!sendAsGuest);\r\n  };\r\n\r\n  const showChats = () => {\r\n    dispatch({\r\n      type: \"OPEN_CHATS\",\r\n      isSidebarHidden: false,\r\n    });\r\n  };\r\n\r\n  let messagesEndRef = useRef(null); //create the ref\r\n\r\n  //scroll to end function\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div\r\n      className={`chat ${initialState.isSidebarHidden ? \"chat__show\" : \" \"}`}\r\n    >\r\n      <div className=\"chat__header\">\r\n        <div className=\"div\" onClick={showChats}>\r\n          <IconButton>\r\n            <ArrowBackIos />\r\n          </IconButton>\r\n        </div>\r\n        <Avatar src={initialState.currentAvatar} />\r\n\r\n        <div className=\"chat__header__info\">\r\n          <h3>{initialState.currentUser}</h3>\r\n        </div>\r\n\r\n        <div className=\"div__chat__header__right\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages\r\n          .filter(\r\n            (msg) =>\r\n              msg.name === initialState.currentUser ||\r\n              (msg.name === \"You\" &&\r\n                msg.currentUser === initialState.currentUser)\r\n          )\r\n          .map((message) => {\r\n            return (\r\n              <FadeIn>\r\n                <div key={Math.random()}>\r\n                  <p\r\n                    key={message.id}\r\n                    className={`chat__body__message ${\r\n                      message.received && \"chat__body__receiver\"\r\n                    }`}\r\n                  >\r\n                    <span className=\"chat__body__message__name\">\r\n                      {message.name}\r\n                    </span>\r\n                    {message.message !== \"\" || null ? message.message : null}\r\n                    <span className=\"chat__body__message__timestamp\">\r\n                      {moment(message.timestamp).fromNow()}\r\n                    </span>\r\n                  </p>\r\n                </div>\r\n              </FadeIn>\r\n            );\r\n          })}\r\n\r\n        <div ref={messagesEndRef}></div>\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticon />\r\n        <form action=\"\" className=\"chat__footer__form\">\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"type a message\"\r\n          />\r\n          {/* <label for=\"chat__footer__form__checkbox\">\r\n            Send as {initialState.currentUser}\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"chat__footer__form__checkbox\"\r\n              onChange={() => setSendAsGuest(!sendAsGuest)}\r\n              checked={sendAsGuest}\r\n            />\r\n          </label> */}\r\n          <p onClick={(e) => changeSender(e)}>\r\n            Sending as\r\n            <span className=\"chat__footer__form__sendAs\">\r\n              {sendAsGuest ? `${initialState.currentUser}` : \"You\"}\r\n            </span>\r\n          </p>\r\n          <button\r\n            className=\"chat__footer__form__submit\"\r\n            onClick={sendMessage}\r\n            type=\"submit\"\r\n          >\r\n            Send\r\n          </button>\r\n        </form>\r\n        <Mic />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./SASS/app.min.css\";\nimport Sidebar from \"./Components/Sidebar\";\nimport Chat from \"./Components/Chat\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n\n  //fetch the synced messages, and push them into an array\n  useEffect(() => {\n    axios.get(\"/messages/sync\").then((response) => {\n      setMessages(response.data);\n    });\n  }, []);\n\n  //create pusher - listen for changes\n  useEffect(() => {\n    const pusher = new Pusher(\"c6c60b7089033928282a\", {\n      cluster: \"eu\",\n    });\n\n    //subscrube to our 'messages' databse. and bind on \"insert\" events\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", function (newMessage) {\n      setMessages([...messages, newMessage]);\n    });\n\n    //cleanup function\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <Sidebar messages={messages} />\n        <Chat messages={messages} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\r\n  users: [\r\n    {\r\n      id: \"0\",\r\n      name: \"Phil\",\r\n      avatar:\r\n        \"https://s.studiobinder.com/wp-content/uploads/2019/09/Quentin-Tarantinos-Star-Trek-Featured-StudioBinder.jpg\",\r\n      online: true,\r\n    },\r\n    {\r\n      id: \"1\",\r\n      name: \"Kidsan\",\r\n      avatar:\r\n        \"https://i.insider.com/5f0a67534dca6808ef640f43?width=1100&format=jpeg&auto=webp\",\r\n    },\r\n    {\r\n      id: \"2\",\r\n      name: \"Cian\",\r\n      avatar:\r\n        \"https://www.indiewire.com/wp-content/uploads/2019/02/shutterstock_10118627hz.jpg\",\r\n    },\r\n    {\r\n      id: \"3\",\r\n      name: \"Shane\",\r\n      avatar:\r\n        \"https://www.cheatsheet.com/wp-content/uploads/2020/09/Brad-Pitt-4-1024x689.jpg\",\r\n    },\r\n  ],\r\n  currentUser: \"Phil\",\r\n  currentAvatar:\r\n    \"https://s.studiobinder.com/wp-content/uploads/2019/09/Quentin-Tarantinos-Star-Trek-Featured-StudioBinder.jpg\",\r\n\r\n  isSidebarHidden: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE_ROOM\":\r\n      return {\r\n        ...state,\r\n        currentUser: action.currentUser,\r\n        currentAvatar: action.currentAvatar,\r\n        isSidebarHidden: action.isSidebarHidden,\r\n      };\r\n    case \"OPEN_CHATS\":\r\n      return {\r\n        ...state,\r\n        isSidebarHidden: action.isSidebarHidden,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./store/StateProvider\";\nimport reducer, { initialState } from \"./store/reducer\";\n\nReactDOM.render(\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}